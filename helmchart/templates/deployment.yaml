apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "datapusher.fullname" . }}
  labels:
    {{- include "datapusher.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "datapusher.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "datapusher.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      #serviceAccountName set to service account name found in cdk ascp_secretsmanager_serviceaccount.yaml
      {{ if .Values.awsDeployment.enabled }}
      serviceAccountName: secret-manager-service-account #{{ include "ckan-chart.serviceAccountName" . }} <-- original value replaced as keitaro chart wants to create own service account, if enabled (not enabled by default)
      {{ end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{ if .Values.awsDeployment.enabled }}
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "aws-secrets" #this is the name of the secretProviderClass created in the cdk with file ascp_secretsstoreconfig.yaml
      {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8800
              protocol: TCP
          env:
            # master postgres vars
            - name: DB_HOST
              value: {{ .Values.DBHost }}
            - name: POSTGRES_USER
              value: {{ .Values.datapusher.masterDBUser }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.datapusher.masterDBPassword }}
            - name: POSTGRES_DB
              value: {{ .Values.datapusher.masterDBName }}
            # SqlAlchemy Connection Strings
            - name: SQLALCHEMY_DATABASE_URI
              value: "postgresql://{{ .Values.datapusher.datapusherJobsDBUser }}:{{ .Values.datapusher.datapusherJobsDBPassword }}@{{ .Values.DBHost }}/{{ .Values.datapusher.datapusherJobsDBName }}"
            - name: WRITE_ENGINE_URL
              value: "postgresql://{{ .Values.datapusher.datastoreRWDBUser }}:{{ .Values.datapusher.datastoreRWDBPassword }}@{{ .Values.DBHost }}/{{ .Values.datapusher.datastoreDBName }}"
            # location of QSV BINARY
            - name: QSV_BIN
              value: {{ .Values.datapusher.qsv.bin }}
            # should datapusher remove duplicate records in a resource?
            - name: QSV_DEDUP
              value: {{ .Values.datapusher.qsv.deduplicate | quote }}
            # vars to use to create / connect to Jobs DB
            - name: JOBS_DB_USER
              value: {{ .Values.datapusher.datapusherJobsDBUser }}
            - name: JOBS_DB_PASSWORD
              value: {{ .Values.datapusher.datapusherJobsDBPassword }}
            - name: JOBS_DB_NAME
              value: {{ .Values.datapusher.datapusherJobsDBName }}
            # vars to use to create / connect to Datastore RW DB
            - name: DATASTORE_DB_USER
              value: {{ .Values.datapusher.datastoreRWDBUser }}
            - name: DATASTORE_DB_PASSWORD
              value: {{ .Values.datapusher.datastoreRWDBPassword }}
            - name: DATASTORE_DB_NAME
              value: {{ .Values.datapusher.datastoreDBName }}
            # location of Datapusher logFile
            - name: LOG_FILE
              value: {{ .Values.datapusher.logFile }}
            # whether Datapusher should log to stdErr
            - name: STDERR
              value: {{ .Values.datapusher.stdErr | quote }}
            # number of preview rows to display via datapusher
            - name: PREVIEW_ROWS
              value: {{ .Values.datapusher.previewRows | quote }}
            - name: DEFAULT_EXCEL_SHEET
              value: {{ .Values.datapusher.defaultExcelSheet | quote }}
            - name: AUTO_ALIAS
              value: {{ .Values.datapusher.autoAlias | quote }}
            # old values
            - name: MAX_CONTENT_LENGTH
              value: {{ .Values.datapusher.maxContentLength | quote }}
            - name: CHUNK_SIZE
              value: {{ .Values.datapusher.chunkSize | quote }}
            - name: CHUNK_INSERT_ROWS
              value: {{ .Values.datapusher.insertRows | quote }}
            - name: DOWNLOAD_TIMEOUT
              value: {{ .Values.datapusher.downloadTimeout | quote }}
            - name: SSL_VERIFY
              value: {{ .Values.datapusher.datapusherSslVerify | quote }}
            - name: REWRITE_RESOURCES
              value: {{ .Values.datapusher.datapusherRewriteResources | quote }}
            - name: REWRITE_URL
              value: {{ .Values.datapusher.datapusherRewriteUrl | quote }}
#injected extraenv vars. will override previously defined variables if same env var name
{{- if .Values.datapusher.extraEnv }}
{{ toYaml .Values.datapusher.extraEnv | indent 12 }}
{{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{ if .Values.awsDeployment.enabled }}
          volumeMounts:
          - name: secrets-store-inline #pv mount for secrets store
            mountPath: "/mnt/secrets-store"
            readOnly: true
          {{ end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}